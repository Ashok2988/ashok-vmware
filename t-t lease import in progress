import time
import requests
import json
import argparse
import getpass
import xmltodict
requests.packages.urllib3.disable_warnings()

class EcMove(object):
 def __init__(self,nm,nu,np,nsxtm,nsxtp):
    self.nm=nm
    self.nu=nu
    self.np=np
    self.auth = (nu, np) 
    self.headers={'content-type': 'application/json'} 
    self.ver=False
    self.nsxtm=nsxtm
    self.nsxtp=nsxtp
    self.auth2=(nu, nsxtp)
    self.ver2=False
    self.authenticate_nsxt() 
    self.authenticate()
    
 def authenticate(self):
   url="https://%s/api/v1/transport-zones" % (self.nsxtm)
   resp=requests.get(url, auth=self.auth, headers=self.headers, verify=False)
   if not resp.ok:
      print("Auth failed, Please check creds")
   else:
      self.ver=True
 def authenticate_nsxt(self):
   url="https://%s/api/v1/transport-zones" % (self.nsxtm)
   resp=requests.get(url, auth=self.auth2, headers=self.headers, verify=False)
   if not resp.ok:
      print("Auth failed, Please check creds")
   else:
     self.ver2=True
      

 def import_lease_into_t(self,sid,lease):
     lease['dhcp_server_id'] = sid 
     print(lease)
     url = "https://%s/api/v1/dhcp/servers/%s/leases" % (self.nsxtm,sid)
     resp=requests.put(url, auth=self.auth2, headers=self.headers,data=json.dumps(lease), verify=False)
     print(resp.content)
 
 def get_ip_pool(self,sid):
     url="https://%s/api/v1/dhcp/servers/%s/ip-pools" %(self.nm,sid)
     resp=requests.get(url, auth=self.auth, headers=self.headers, verify=False)
     payload=json.loads(resp.content)
     pool=payload['results'][0]['id']
     return pool
 def get_temp_nsxt_lease(self,sid,pool):
     url="https://%s/api/v1/dhcp/servers/%s/leases?pool_id=%s" %(self.nm,sid,pool)
     resp=requests.get(url, auth=self.auth, headers=self.headers, verify=False)
     payload=json.loads(resp.content)
     print(payload)
     for i in payload['leases']:
        i.pop('expire_time')
     return payload
def get_parse_arguments():
    parser = argparse.ArgumentParser(description='T-T lease movement') 
    parser.add_argument('--tmpnsxip',
                        help='nsx manager ip',
                        required=True, default=False)
    parser.add_argument('--tmpnsxuser',
                        help='nsx username',
                        required=True, default=False)
    parser.add_argument('--tmpnsxpwd',
                        help='nsx password',
                        required=True,    
                         default=False)
    parser.add_argument('--nsxtip',
                        help='nsxt manager ip',
                        required=True, default=False)
    parser.add_argument('--nsxtpwd',
                        help='nsxt password',
                         required=True,
                         default=False)
    return parser.parse_args()


if __name__ == '__main__':
    args=get_parse_arguments()
    nm = args.tmpnsxip
    nu = args.tmpnsxuser
    np = args.tmpnsxpwd
    obj=EcMove(nm,nu,np,args.nsxtip,args.nsxtpwd)
    if  obj.ver and obj.ver2:
       with open('dhcp-list') as json_file:
          d=json.load(json_file)
          for sid in d:
             lease=obj.get_temp_nsxt_lease(sid,obj.get_ip_pool(sid))
             obj.import_lease_into_t(d[sid],lease)
