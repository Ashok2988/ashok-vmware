"""
Author: ashokb@vmware.com
"""
import time
import requests
import json
import argparse
import getpass
from requests.exceptions import HTTPError
requests.packages.urllib3.disable_warnings()

class TagUpdate(object):
 def __init__(self,nm,nu,np):
    self.nm=nm
    self.nu=nu
    self.np=np
    self.auth = (nu, np)
    self.headers={'content-type': 'application/json'}
    self.ver=False
    self.authenticate()
    self.c=[] 
 def authenticate(self):
   url="https://%s/api/v1/transport-zones" % (self.nm)
   resp=requests.get(url, auth=self.auth, headers=self.headers, verify=False)
   if not resp.ok:
      print("Auth failed, Please check creds")
   else:
      self.ver=True
 def create_vm_tags_nsg(self):
   url="https://%s/api/v1/fabric/virtual-machines" % (self.nm)  
   resp=requests.get(url, auth=self.auth, headers=self.headers, verify=False)
   vm=(resp.json())
   for i in vm['results']:  
      if 'tags' in i.keys():
          continue
          
      if i['display_name'].startswith('src'):
         url="https://%s/api/v1/fabric/virtual-machines?action=add_tags" % (self.nm) 
         print("processing vm %s" %i['display_name'])
         d={    "external_id": i['external_id'],
		"tags": [
        	{"scope": "test", "tag": i['display_name']}
                ]}
         resp=requests.post(url, auth=self.auth, headers=self.headers,data=json.dumps(d), verify=False)
         resp.raise_for_status()
         url="https://%s/policy/api/v1/infra/domains/default/groups/%s" %(self.nm,i['display_name'])
         d={
         "expression": [
            {
        	"member_type": "VirtualMachine",
        	"value": i['display_name'],
        	"key": "Tag",
        	"operator": "EQUALS",
       	 	"resource_type": "Condition"
      	    }
            ],
           "description": i['display_name'],
           "display_name": i['display_name'],
           "_revision":0
         }
         resp=requests.patch(url, auth=self.auth, headers=self.headers,data=json.dumps(d), verify=False)
         resp.raise_for_status()  
         
         
    
 def create_section(self,bp,iter):
   d={
   "display_name": "new",
   "section_type" : "LAYER3",
   "stateful" : True,
   "applied_tos" : [ {
      "target_id" : bp,
       "target_type" : "LogicalPort",
      "is_valid" : True
    } ]
   }
   url="https://%s/api/v1/firewall/sections" % (self.nm)
   resp=requests.post(url, auth=self.auth, headers=self.headers,data=json.dumps(d),verify=False)
   resp.raise_for_status()
   c=resp.json()
   for i in [iter,iter-1]: 
      g='src'+str(i)
      url="https://%s/policy/api/v1/infra/domains/default/groups/%s" %(self.nm,g)
      resp=requests.get(url,auth=self.auth, headers=self.headers,verify=False)
      resp=resp.json()
            
      d= {"sources" : [ {
    	"target_id" : "bcca853d-4003-4609-ab28-3a08596ad6c2",
    	"target_display_name" : "A1",
    	"target_type" : "NSGroup",
    	"is_valid" : True
    	} ],
      "destinations" : [ {
      "target_id" : resp['unique_id'],
      "target_display_name" : g,
      "target_type" : "NSGroup",
      "is_valid" : True
       } ],
      "ip_protocol": "IPV4",
      "logged": False,
      "action": "ALLOW",
      "services": [{
      "target_id":"0b12e2c3-a728-456e-a246-2b722b7b9212",
       "target_display_name" : "SSH",
      "target_type" : "NSService",
      "is_valid" : True
    }
         ],
      "disabled": False,
      "direction": "IN_OUT",
       "display_name": "layer3rule1"
        }
      url="https://%s/api/v1/firewall/sections/%s/rules" % (self.nm,c['id'])
      
      resp=requests.post(url, auth=self.auth, headers=self.headers,data=json.dumps(d),verify=False) 
      resp.raise_for_status() 
      self.c.append(resp.json())
      
     
 def get_bridge_fw_rule(self):
   pass 

 def delete_section(self):
   f = open('rules.json') 
   d=json.load(f)
   visited=set()
   for i in d:
     if i['section_id'] in visited:
        continue
     url="https://%s/api/v1/firewall/sections/%s?cascade=true" % (self.nm,i['section_id'])
     resp=requests.delete(url,auth=self.auth, headers=self.headers,verify=False)  
     visited.add(i['section_id'])
     resp.raise_for_status() 


def get_parse_arguments():
    parser = argparse.ArgumentParser(description='Tag update script')
    parser.add_argument('--nsxip',
                        help='nsx manager ip',
                        required=True, default=False)
    parser.add_argument('--nsxuser',
                        help='nsx username',
                        required=True, default=False)
    parser.add_argument('--nsxpwd',
                        help='nsx password',
                         default=False)
   
    return parser.parse_args()


if __name__ == '__main__':
    args=get_parse_arguments()
    if not args.nsxpwd:
       nsxpwd = getpass.getpass("NSX Manager password: ")
    else:
       nsxpwd=args.nsxpwd
    nm = args.nsxip
    nu = args.nsxuser
    np = nsxpwd
    obj=TagUpdate(nm,nu,np)
    if  obj.ver:

       for i in range(2,5,2):
            #obj.create_vm_tags_nsg()   
            obj.create_section("6351336b-3c49-4a26-83ee-82cc165624c1",i)
       with open('rules.json', 'w') as f:
              json.dump(obj.c, f,indent=4)
       obj.delete_section()
