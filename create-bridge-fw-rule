"""
Author: ashokb@vmware.com
"""
import time
import requests
import json
import argparse
import getpass
from requests.exceptions import HTTPError
requests.packages.urllib3.disable_warnings()

class TagUpdate(object):
 def __init__(self,nm,nu,np):
    self.nm=nm
    self.nu=nu
    self.np=np
    self.auth = (nu, np)
    self.headers={'content-type': 'application/json'}
    self.ver=False
    self.authenticate()

 def authenticate(self):
   url="https://%s/api/v1/transport-zones" % (self.nm)
   resp=requests.get(url, auth=self.auth, headers=self.headers, verify=False)
   if not resp.ok:
      print("Auth failed, Please check creds")
   else:
      self.ver=True

 
 def create_section(self,bp):
   d={
   "display_name": "new",
   "section_type" : "LAYER3",
   "stateful" : True,
   "applied_tos" : [ {
      "target_id" : bp,
       "target_type" : "LogicalPort",
      "is_valid" : True
    } ]
   }
   url="https://%s/api/v1/firewall/sections" % (self.nm)
   resp=requests.post(url, auth=self.auth, headers=self.headers,data=json.dumps(d),verify=False)
   c=resp.json()
   d= {"sources" : [ {
    "target_id" : "f2c8eaa3-9978-4158-ae16-6ddee19a4b49",
    "target_display_name" : "test",
    "target_type" : "NSGroup",
    "is_valid" : True
    } ],
    "destinations" : [ {
    "target_id" : "10.172.106.1",
    "target_display_name" : "10.172.106.1",
    "target_type" : "IPv4Address",
    "is_valid" : True
     } ],
    "ip_protocol": "IPV4",
     "logged": False,
     "action": "ALLOW",
     "disabled": False,
     "direction": "IN_OUT",
      "display_name": "layer3rule1"
     }
   url="https://%s/api/v1/firewall/sections/%s/rules" % (self.nm,c['id'])
   resp=requests.post(url, auth=self.auth, headers=self.headers,data=json.dumps(d),verify=False) 
   resp.raise_for_status() 
   
   
     
 def get_bridge_fw_rule(self):
   pass 
       


def get_parse_arguments():
    parser = argparse.ArgumentParser(description='Tag update script')
    parser.add_argument('--nsxip',
                        help='nsx manager ip',
                        required=True, default=False)
    parser.add_argument('--nsxuser',
                        help='nsx username',
                        required=True, default=False)
    parser.add_argument('--nsxpwd',
                        help='nsx password',
                         default=False)
   
    return parser.parse_args()


if __name__ == '__main__':
    args=get_parse_arguments()
    if not args.nsxpwd:
       nsxpwd = getpass.getpass("NSX Manager password: ")
    else:
       nsxpwd=args.nsxpwd
    nm = args.nsxip
    nu = args.nsxuser
    np = nsxpwd
    obj=TagUpdate(nm,nu,np)
    if  obj.ver:
        obj.create_section("eb1ac7b5-5453-4a3e-bd80-4f363a156c00")
