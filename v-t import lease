import time
import requests
import json
import argparse
import getpass
import xmltodict
requests.packages.urllib3.disable_warnings()

class LeaseMove(object):
 def __init__(self,nm,nu,np,nsxtm,nsxtp):
    self.nm=nm
    self.nu=nu
    self.np=np
    self.auth = (nu, np)
    self.headers={'content-type': 'application/json'}
    self.ver=False
    self.nsxtm=nsxtm
    self.nsxtp=nsxtp
    self.auth2=(nu, nsxtp)
    self.ver2=False
    self.authenticate_nsxt()
    self.authenticate()

 def authenticate(self):
   url="https://%s/api/4.0/edges" % (self.nm)
   resp=requests.get(url, auth=self.auth, headers=self.headers, verify=False)
   if not resp.ok:
      print("Auth failed, Please check creds")
   else:
      self.ver=True
 def authenticate_nsxt(self):
   url="https://%s/api/v1/transport-zones" % (self.nsxtm)
   resp=requests.get(url, auth=self.auth2, headers=self.headers, verify=False)
   if not resp.ok:
      print("Auth failed, Please check creds")
   else:
     self.ver2=True

 def _get_lease_v(self,edge):

       url = "https://%s/api/4.0/edges/%s/dhcp/leaseInfo" % (self.nm, edge)
       resp=requests.get(url, auth=self.auth, headers=self.headers, verify=False)
       resp=(xmltodict.parse(resp.content))
       dhcp_leases_json=json.dumps(resp)
       print(dhcp_leases_json)
       dhcp_leases_json=json.loads(dhcp_leases_json)
       dhcp_leases = dhcp_leases_json['dhcpLeases']['dhcpLeaseInfo'].get('leaseInfo', [])
       return dhcp_leases

 def v2t_mgr_dhcp_lease_body(self,v_dhcp_lease):
        ip_address = v_dhcp_lease['ipAddress']
        mac_address = v_dhcp_lease['macAddress']
        # V uses dhcpd leases in which date format is like
        # 'weekday year/month/day hour:minute:second' and weekday number is
        # zero to six, with zero being Sunday. Also lease times are always
        # specified in UTC, not in the local time zone.
        start_time = v_dhcp_lease['starts'][2:]
        time_format = "%Y/%m/%d %H:%M:%S"
        start_time_struct = time.strptime(start_time, time_format)
        start_time_str = time.strftime("%Y-%m-%d %H:%M:%S +0000",
                                       start_time_struct)
        if v_dhcp_lease['ends'].strip() == "never":
            lease_time = 4294967295
        else:
            end_time = v_dhcp_lease['ends'][2:]
            end_time_struct = time.strptime(end_time, time_format)
            lease_time = (time.mktime(end_time_struct) -
                          time.mktime(start_time_struct))
            lease_time = int(lease_time)
        return {'ip_address': ip_address,
                'mac_address': mac_address,
                'start_time': start_time_str,
                'lease_time': lease_time}

 def v2t_mgr_dhcp_leases_body(self,v_leases):
        t_leases_dict = {'leases': []}
        # Need to check v lease info
        t_leases = t_leases_dict['leases']
        dupcheck={}
        for v_lease in v_leases:

            #t_leases.append(self.v2t_mgr_dhcp_lease_body(v_lease))
             l=self.v2t_mgr_dhcp_lease_body(v_lease)
             dupcheck[l['ip_address']]=l
        for i in dupcheck:
           t_leases.append(dupcheck[i])

        return t_leases_dict


 def import_lease_into_t(self,sid,lease):
     lease['dhcp_server_id'] = sid
     print(lease)
     print("importing %d leases" %(len(lease['leases'])))
     url = "https://%s/api/v1/dhcp/servers/%s/leases" % (self.nsxtm,sid)
     resp=requests.put(url, auth=self.auth2, headers=self.headers,data=json.dumps(lease), verify=False)
     print(resp)

def get_parse_arguments():
    parser = argparse.ArgumentParser(description='T1 EC update script')
    parser.add_argument('--nsxip',
                        help='nsx manager ip',
                        required=True, default=False)
    parser.add_argument('--nsxuser',
                        help='nsx username',
                        required=True, default=False)
    parser.add_argument('--nsxpwd',
                        help='nsx password',
                         default=False)
    parser.add_argument('--nsxtip',
                        help='nsxt manager ip',
                        required=True, default=False)
    parser.add_argument('--nsxtpwd',
                        help='nsxt password',
                         default=False)
    return parser.parse_args()


if __name__ == '__main__':
    args=get_parse_arguments()
    if not args.nsxpwd:
       nsxpwd = getpass.getpass("NSX Manager password: ")
    else:
       nsxpwd=args.nsxpwd
    nm = args.nsxip
    nu = args.nsxuser
    np = nsxpwd
    obj=LeaseMove(nm,nu,np,args.nsxtip,args.nsxtpwd)
    if  obj.ver and obj.ver2:
      with open('edge-list') as json_file:
        d=json.load(json_file)
        for edge in d:
           leases=obj._get_lease_v(edge)
           c=obj.v2t_mgr_dhcp_leases_body(leases)
           sid=d[edge]
           obj.import_lease_into_t(sid,c)
