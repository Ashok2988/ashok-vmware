import time
import requests
import json
import argparse
import getpass
requests.packages.urllib3.disable_warnings()

class TagUpdate(object):
 def __init__(self,nm,nu,np):
    self.nm=nm
    self.nu=nu
    self.np=np
    self.auth = (nu, np)
    self.headers={'content-type': 'application/json'}
    self.ver=False
    self.authenticate()

 def authenticate(self):
   url="https://%s/api/v1/transport-zones" % (self.nm)
   resp=requests.get(url, auth=self.auth, headers=self.headers, verify=False)
   if not resp.ok:
      print("Auth failed, Please check creds")
   else:
      self.ver=True

 def create_rule(self,segname,prefix):
     try:
        url="https://%s/policy/api/v1/infra/segments/%s" % (self.nm,segname)
        resp=requests.get(url, auth=self.auth, headers=self.headers, verify=False)
        resp.raise_for_status()
        payload=json.loads(resp.content)
        path=payload["path"]
        gwip=(payload['subnets'][0]['gateway_address'].split('/')[0])
        url="https://%s/policy/api/v1/infra/domains/default/groups/%s" % (self.nm,prefix+'_grp-nsm-'+segname)
        d={
        "expression": [
        {
        "paths":  [path],
        "resource_type": "PathExpression"
        }
        ],
        "display_name": prefix+'_grp-nsm-'+segname,
        "tags": [{'scope': 'test','tag':'test'}] ,
        "_revision":0
        }
        resp=requests.patch(url, auth=self.auth, headers=self.headers,data=json.dumps(d), verify=False)
        resp.raise_for_status()
        d={
        "expression": [
        {
        "ip_addresses":  [gwip],
        "resource_type": "IPAddressExpression"
        }
        ],
        "display_name": prefix+'_grp-ips-'+segname,
        "tags": [{'scope': 'test','tag':'test'}] ,
        "_revision":0
        }
        url="https://%s/policy/api/v1/infra/domains/default/groups/%s" % (self.nm,prefix+'_grp-ips-'+segname)
        resp=requests.patch(url, auth=self.auth, headers=self.headers,data=json.dumps(d), verify=False)
        resp.raise_for_status()
        url="https://%s/policy/api/v1/infra/domains/default/security-policies/new/rules/%s" %(self.nm,prefix+'dfw-seg2icmp-'+segname)
        d={
         "display_name": prefix+'dfw-seg2icmp-'+segname,
         "source_groups": [
         "/infra/domains/default/groups/%s_grp-nsm-%s" %(prefix,segname)
          ],
         "destination_groups": [
         "/infra/domains/default/groups/%s_grp-ips-%s" %(prefix,segname)
        ],
          "action": "ALLOW",
          "scope": ["/infra/domains/default/groups/%s_grp-nsm-%s" %(prefix,segname)],
         "services": [
      "/infra/services/ICMP_Echo_Reply","/infra/services/ICMP_Echo_Request"
         ]
        }
        resp=requests.patch(url, auth=self.auth, headers=self.headers,data=json.dumps(d), verify=False)
        resp.raise_for_status()


     except Exception as e:
             print(e)
def get_parse_arguments():
    parser = argparse.ArgumentParser(description='Tag update script')
    parser.add_argument('--nsxip',
                        help='nsx manager ip',
                        required=True, default=False)
    parser.add_argument('--nsxuser',
                        help='nsx username',
                        required=True, default=False)
    parser.add_argument('--nsxpwd',
                        help='nsx password',
                         default=False),
    parser.add_argument('--dfwsecname',
                        help='dfwsec-name',
                        required=True, default=False),
    parser.add_argument('--prefix',
                        help='prefix',
                        required=True, default=False)

    return parser.parse_args()


if __name__ == '__main__':
    args=get_parse_arguments()
    if not args.nsxpwd:
       nsxpwd = getpass.getpass("NSX Manager password: ")
    else:
       nsxpwd=args.nsxpwd
    nm = args.nsxip
    nu = args.nsxuser
    np = nsxpwd
    sn = args.dfwsecname
    pr= args.prefix
    obj=TagUpdate(nm,nu,np)
    if  obj.ver:
        with open("seg", "r") as f:
          data=f.readlines()
          for i in data:
               obj.create_rule(i.strip(),pr)
